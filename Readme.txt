ABhishek Jain
GTID # 902985939
AOS PROJECT
GTTHREAD

1)   What Linux platform do you use?
Ans) Used Parallels on MAC to run the following version of UBUNTU.
     UBUNTU 14.04 LTS with 3.9 GB of RAM.Processor : Intel® Core™ i7-3615QM CPU @ 2.30GHz × 4 

2) How the preemptive scheduler is implemented?
Ans) The preemptive scheduler is used using a doubly linked linked list. each node of a linked list has a 
     ucontext variable. Every time a signal is generated by the timer, we move to the next node and resume
     execution from the context of that particular node.Each node acts a thread. Also an exit node is 
     used. This does not act as a thread. The routine associated with this node is only used to check if any
     user threads are available or not. If not the routine does a cleanup and exits the program. Also, whenever 
     a new node is added or removed from the linked list, scheduling starts from this exit node so as to avoid
     any errors. Blocking and unblocking of the timer interrupt was not working properly and hence a global
     variable was used which prevent context switching if required. Context switching would take place only if 
     this variable was set. 

3) How to compile your library and run your program?
Ans) To run the dining philosophers problem,
     untar my folder
     make clean
     make
     ./Dining_Philosopher

    To run the tests
    cd tests
    change Makefile's CSRCDIR to src or more_tests to run required tests
    make and keep pressing enter to run the tests

4) How you prevent deadlocks in your Dining Philosophers solution?
Ans) Assuming there are 5 philosophers and 5 chopsticks. 
     Philosophers are numbered from 1 to 5
     Chopsticks are numbered from 0 to 4
     All odd numbered philosophers first chose the chopstick with id same as their own and then choose the 
     chopstick with id one less than their own
     hence 1 chooses 1 and 0, 3 chooses 3 and 2, 5 chooses 0 and 4
     All even numbered philosophers first chose the chopstick with id one less than their own and then choose
     the chopstick with id equal to their own
     hence 2 chooses 1 and 2, 4 chooses 3 and 4
     while releasing the chopsticks all philosophers release them in a reverse order. i.e. 1 drops 0 first 
     and then it drops 1 and so on...
     This allows successful prevention of deadlocks


5) Any thoughts you have on the project, including things that work especially well or which don't work.
Ans) Scenarios where yield is not used, interleaving may show some degree of randomness
     Blocking unblocking of signals did not work and hence was not used

